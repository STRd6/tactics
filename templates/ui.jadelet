- ui = this
- ActionPresenter = require "../presenters/action"
- CharacterPresenter = require "../presenters/character"

.ui
  .winner_container
    h1.winner
    h3.restart(click=location.reload)
      = "Play Again?"
  h1.title Tactics
  .hud
    - clickHandler = (e) ->
      - $(e.currentTarget).parent().toggleClass("hidden")
    pre.messages
      = @messages
    .toggle(click=clickHandler)= "="
    .characters_container
      - @characters.forEach (character) ->
        - {classes, click} = CharacterPresenter(character)
        .character(class=classes click=click)
          .bolt
          .health
            - character.health().times ->
              span.heart
          .costs
            .container
              - character.actions().times ->
                .cost
          .avatar
          .info
            h2.name= character.name()
            span.type= character.type()
          .stats
            .movement
              span Movement:
              span.value= character.movement()
            .strength
              span Strength:
              span.value= character.strength()
            .sight
              span Sight:
              span.value= character.sight()

  .actions
    - @actions.forEach (action) ->
      - {classes, click, progress, progressContainer, style, title} = ActionPresenter(action, ui)
      .action(class=classes style=style title=title click=click)
        - if action.cooldown
          .cooldown= action.cooldown
          .progress_container(style=progressContainer)
            .progress(style=progress)
        .costs
          .container
            - action.cost?.times ->
              - typeClass = -> "rest" if action.costType?() is 2
              - title = if typeClass() is "rest" then "Uses remaining actions for this turn" else "Uses #{action.cost} actions"
              .cost(class=typeClass title=title)
        = action.name
