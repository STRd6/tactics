- ui = this
- ActionPresenter = require "../presenters/action"
- CharacterPresenter = require "../presenters/character"

.ui
  .winner_container
    %h1.winner
    %h3.restart
      = "Play Again?"
      - on "click", ->
        - location.reload()
  %h1.title Tactics
  .messages_container
    %pre.messages
      - each @messages, (message) ->
        = message
      - @messages.observe ->
        - $(".messages").animate scrollTop: $('.messages')[0].scrollHeight, 1000
    .toggle
      = "="
      - on "click", (e) ->
        - $(e.currentTarget).parent().toggleClass("hidden")
  .characters_container
    - each @characters, (character) ->
      - {classes, click} = CharacterPresenter(character)
      .character(class=classes)
        - on "click", click
        .bolt
        .health
          - character.health().times ->
            %span.heart
        .avatar
        .name= character.name()

  .actions
    - each @actions, (action) ->
      - {classes, click, style, title} = ActionPresenter(action, ui)
      .action(class=classes style=style title=title)
        - if action.cooldown
          .cooldown= action.cooldown
        .costs
          .container
            - action.cost?.times ->
              - typeClass = -> "rest" if action.costType?() is 2
              - title = if typeClass() is "rest" then "Uses remaining actions for this turn" else "Uses #{action.cost} actions"
              .cost(class=typeClass title=title)
        = action.name
        - on "click", click
